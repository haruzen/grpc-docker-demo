- name: Provision EC2 for microservices
  hosts: webserver
  become: true
  vars:
    docker_username: "{{ lookup('env', 'DOCKER_USERNAME') }}"
    docker_password: "{{ lookup('env', 'DOCKER_PASSWORD') }}"
    node_image: "{{ docker_username }}/node-rest:release_v1.0"
    python_image: "{{ docker_username }}/python-grpc:release_v1.0"
  tasks:
    - name: Ensure Docker is installed
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: true
    # üîÑ Cleanup: Remove existing containers
    - name: Stop and remove existing Node.js REST container if it exists
      docker_container:
        name: node-rest
        state: absent
        force_kill: true

    - name: Stop and remove existing Python gRPC container if it exists
      docker_container:
        name: python-grpc
        state: absent
        force_kill: true
    
    # üßπ Optional Cleanup: Remove existing Docker images
    - name: Remove existing Node.js REST image if it exists
      docker_image:
        name: "{{ node_image }}"
        state: absent
        force_absent: true

    - name: Remove existing Python gRPC image if it exists
      docker_image:
        name: "{{ python_image }}"
        state: absent
        force_absent: true
    
    - name: Login to Docker Hub
      shell: echo "{{ docker_password }}" | docker login -u "{{ docker_username }}" --password-stdin

    # üåê Ensure custom bridge network exists
    - name: Ensure 'backend' Docker network exists
      docker_network:
        name: backend
        driver: bridge
        state: present
    
    - name: Pull Node.js REST image
      docker_image:
        name: "{{ node_image }}"
        source: pull

    - name: Pull Python gRPC image
      docker_image:
        name: "{{ python_image }}"
        source: pull

    - name: Run Python gRPC container
      docker_container:
        name: python-grpc
        image: "{{ python_image }}"
        state: started
        restart_policy: always
        ports:
          - "50051:50051"
        networks:
          - name: backend

    - name: Run Node.js REST container
      docker_container:
        name: node-rest
        image: "{{ node_image }}"
        state: started
        restart_policy: always
        ports:
          - "80:3000"
        env:
          GRPC_HOST: "python-grpc"
          GRPC_PORT: "50051"
        networks:
          - name: backend

